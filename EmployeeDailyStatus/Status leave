using BusinessLayer;
using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.AxHost;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace EmployeeDailyStatus
{
    public partial class StatusLeave : Form
    {
        public string _UserID;
        public int ID = 0;

        //  public static int BusinessDays(this DateTime LeaveFrom, DateTime LeaveTo, params DateTime[] bankHolidays);
        public StatusLeave(string UserID)
        {
            InitializeComponent();
            this.WindowState = FormWindowState.Maximized;
            _UserID = UserID;
        }

        private void StatusLeave_Load(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Maximized;
            txtUserId.Text = _UserID;
            dtdate.Value = DateTime.Now;
            dtLeaveFrom.Value = DateTime.Now;
            dtLeaveTo.Value = DateTime.Now;            
            txtLeaveDays.Text = "1";           
            LoadLeaveDetails();
        }

        private static int BusinessDays(DateTime LeaveFrom, DateTime LeaveTo, params DateTime[] bankHolidays)
        {
            LeaveFrom = LeaveFrom.Date;
            LeaveTo = LeaveTo.Date;
           // if (LeaveFrom > LeaveTo)
            //    throw new ArgumentException("Incorrect last day " + LeaveTo);

            TimeSpan span = LeaveTo - LeaveFrom;
            int LeaveDays = span.Days + 1;
            int fullWeekCount = LeaveDays / 7;
            // find out if there are weekends during the time exceedng the full weeks
            if (LeaveDays > fullWeekCount * 7)
            {
                // we are here to find out if there is a 1-day or 2-days weekend
                // in the time interval remaining after subtracting the complete weeks
                int firstDayOfWeek = (int)LeaveFrom.DayOfWeek;
                int lastDayOfWeek = (int)LeaveTo.DayOfWeek;
                if (lastDayOfWeek < firstDayOfWeek)
                    lastDayOfWeek += 7;
                if (firstDayOfWeek <= 6)
                {
                    if (lastDayOfWeek >= 7)// Both Saturday and Sunday are in the remaining time interval
                        LeaveDays -= 2;
                    else if (lastDayOfWeek >= 6)// Only Saturday is in the remaining time interval
                        LeaveDays -= 1;
                }
                else if (firstDayOfWeek <= 7 && lastDayOfWeek >= 7)// Only Sunday is in the remaining time interval
                    LeaveDays -= 1;
            }

            // subtract the weekends during the full weeks in the interval
            LeaveDays -= fullWeekCount + fullWeekCount;

            // subtract the number of bank holidays during the time interval
            foreach (DateTime bankHoliday in bankHolidays)
            {
                DateTime bh = bankHoliday.Date;
                if (LeaveFrom <= bh && bh <= LeaveTo)
                    --LeaveDays;
            }

            return LeaveDays;
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            StatusList s1 = new StatusList();
            s1.Show();
            this.Hide();
        }

        private void btnAddLeave_Click(object sender, EventArgs e)
        {
            if (validation())
            {
			
			//idid
				DateTime leaveFromDate = dtLeaveFrom.Value.Date;
				bool isLeaveDateToday = leaveFromDate == DateTime.Today;
				bool isLeaveInPast = leaveFromDate < DateTime.Today;

				//  Prevent applying leave for today
				if (isLeaveDateToday)
				{
					MessageBox.Show("You cannot update leave for today.");
					return;
				}

				//  Prevent applying leave for any past date
				if (isLeaveInPast)
				{
					MessageBox.Show("You cannot apply leave for past dates.");
					return;
				}
				
			//idid
                BAL balobj = new BAL();
                string UserId = txtUserId.Text;
                DateTime date = dtdate.Value;
                DateTime LeaveFrom = dtLeaveFrom.Value;
                DateTime LeaveTo = dtLeaveTo.Value;
                int LeaveDays = Convert.ToInt32(txtLeaveDays.Text);

                bool result = false;

                if (ID == 0)
                    result = balobj.InsertLeaveDetails(UserId, LeaveFrom, LeaveTo, LeaveDays);
                else
                    result = balobj.UpdateLeaveDetails(ID, LeaveFrom, LeaveTo, LeaveDays);

                //idid
                //bool isLeaveDateToday = dtLeaveFrom.Value.Date == DateTime.Today;

                //if (isLeaveDateToday)
                //{
                //    MessageBox.Show("You cannot update leave for today.");
                //    return; // Prevent saving
                //}
                //idid
                if (result == true)
                {
                    lblMessage.Text = "Saved Successfully";
                }
                else
                {
                    lblMessage.Text = "Try again";
                }
                
                LoadLeaveDetails();

                dtLeaveFrom.Value = DateTime.Now;
                dtLeaveTo.Value = DateTime.Now;
                txtLeaveDays.Text = string.Empty;
                ID = 0;
                
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            dtLeaveFrom.Value = DateTime.Now;
            dtLeaveTo.Value = DateTime.Now;
            txtLeaveDays.Text = string.Empty;
            ID = 0;
            lblMessage.Text = "";
        }

        public void LoadLeaveDetails()
        {
            BAL balobj = new BAL();
            string UserId = txtUserId.Text;
            DataTable dt = balobj.SelectLeaveDetails(UserId);
            dgvLeaveDetails.DataSource = dt;
            dgvLeaveDetails.AutoGenerateColumns = false;
            dgvLeaveDetails.Refresh();
            dgvLeaveDetails.Columns["colLeaveFrom"].DisplayIndex = 0;
            dgvLeaveDetails.Columns["colLeaveTo"].DisplayIndex = 1;
            dgvLeaveDetails.Columns["colLeaveDays"].DisplayIndex = 2;
            dgvLeaveDetails.Columns["colLeaveApplied"].DisplayIndex = 3;
            dgvLeaveDetails.Columns["colEdit"].DisplayIndex = 4;
            dgvLeaveDetails.Columns["colDelete"].DisplayIndex = 5;
        }

        private void dgvLeaveDetails_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            BAL balobj = new BAL();
            int rowIndex = e.RowIndex;
            if (dgvLeaveDetails.Columns[e.ColumnIndex].HeaderText.ToUpper() == "EDIT" && dgvLeaveDetails.Rows[rowIndex].Cells["colEdit"].Value.ToString() != string.Empty)
            { 
                ID = Convert.ToInt32(dgvLeaveDetails.Rows[rowIndex].Cells["CID"].Value.ToString());
                dtLeaveFrom.Value = Convert.ToDateTime(dgvLeaveDetails.Rows[rowIndex].Cells["colLeaveFrom"].Value);

                dtLeaveTo.Value = Convert.ToDateTime(dgvLeaveDetails.Rows[rowIndex].Cells["colLeaveTo"].Value);
                txtLeaveDays.Text = dgvLeaveDetails.Rows[rowIndex].Cells["colLeavedays"].Value.ToString();
            }

            if (dgvLeaveDetails.Columns[e.ColumnIndex].HeaderText.ToUpper() == "DELETE" && dgvLeaveDetails.Rows[rowIndex].Cells["colDelete"].Value.ToString() != string.Empty)
            {
                int ID = Convert.ToInt32(dgvLeaveDetails.Rows[rowIndex].Cells["CID"].Value.ToString());
                bool result;
                DialogResult res = MessageBox.Show("Are you sure you want to permanently remove from Employee Daily Status?", "Confirm Delete", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                if (res == DialogResult.OK)
                    result = balobj.DeleteLeaveDetails(ID);

                LoadLeaveDetails();
            }
        }
        private bool validation()
        {
            if (dtLeaveFrom.Value.ToString() == String.Empty)
            {
                MessageBox.Show("Select Leave From Date");
                return false;
            }
            else if (dtLeaveTo.Value.ToString() == String.Empty)
            {
                MessageBox.Show("Select Leave To Date");
                return false;

            }
            else if (dtLeaveFrom.Value > dtLeaveTo.Value)
            {
                MessageBox.Show("Incorrect last day " + dtLeaveTo.Value);
                return false;
            }
            else
            {
                return true;
            }
        }


        private void dgvLeaveDetails_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            DateTime date = DateTime.Now;

            for (int index = 0; index < dgvLeaveDetails.Rows.Count; index++)
            {
                DateTime LeaveTo = DateTime.Parse(dgvLeaveDetails.Rows[index].Cells["colLeaveTo"].Value.ToString());
                if (date <= LeaveTo)
                {
                    DataGridViewLinkCell linkCellOrder = new DataGridViewLinkCell();
                    linkCellOrder.Value = "Edit";
                    dgvLeaveDetails["colEdit", index] = linkCellOrder;

                    DataGridViewLinkCell linkCellSummary = new DataGridViewLinkCell();
                    linkCellSummary.Value = "Delete";
                    dgvLeaveDetails["colDelete", index] = linkCellSummary;
                }
            }
        }

        private void dtLeaveFrom_ValueChanged(object sender, EventArgs e)
        {
            DateTime LeaveFrom = dtLeaveFrom.Value;
            DateTime LeaveTo = dtLeaveTo.Value;
            txtLeaveDays.Text = BusinessDays(LeaveFrom, LeaveTo).ToString();
        }
    }
}